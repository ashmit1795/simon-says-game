const buttonColors = ["red", "blue", "green", "yellow"]
var gamePattern = [];
var userClickedPattern = [];
let level = 0; // Initially level is zero

// Function to play sounds
function playSound(audioName){
    let audioSrc = `./sounds/${audioName}.mp3`;
    let audio = new Audio(audioSrc);
    audio.play();
}

// Function to add animation when button is clicked by the user
function animatePress(currentColor){
    $(currentColor).addClass("pressed");
    setTimeout(()=>{
        $(currentColor).removeClass("pressed");
    },100)
}

//Mouse event
$(".btn").on("click", function(evt){
    animatePress(evt.target);
    // Tracking the user clicked pattern
    let userChosenColor = $(this).attr("id");
    userClickedPattern.push(userChosenColor);
    // Calling function to check either the userClickedPattern is equal to gamePattern generated by nextSequence function
    checkAnswer(userClickedPattern.indexOf(userChosenColor));
    playSound(userChosenColor);
})

// Game starts from here. Press any key to start.
let started = false;
$(document).keydown(function(evt){
    // If the game is not started, start the game
    if (started === false){
        $("#level-title").html(`Level ${level}`);
        // Function call to generate the gamePattern
        nextSequence();
        // Game started
        started = true;
    }
})

// function to check wether the userClickedPattern is equal to gamePattern
function checkAnswer(currentLevel){
    console.log(userClickedPattern);
    if(userClickedPattern[currentLevel] === gamePattern[currentLevel]){
        if(userClickedPattern.length === gamePattern.length){
            console.log("Success");
            // Increasing the level by calling again nextSequence function
            setTimeout(()=>{
                nextSequence();
            },1000)
        }
    }else{
        let wrongAudio = new Audio("./sounds/wrong.mp3");
        wrongAudio.play();
        $("#level-title").html(`Game Over, Press Any Key to Restart`);
        $("body").addClass("game-over");
        setTimeout(()=>{
            $("body").removeClass("game-over");
        },200)
        // Restarting the game
        startOver();
    }
}

// Function for generating the game pattern
function nextSequence(){
    userClickedPattern = [];
    level++;
    $("#level-title").html(`Level ${level}`);
    // Choosing color randomly from buttonColors array and appending it to the game pattern array
    let randomNumber = Math.floor(Math.random()*4);
    let randomChosenColor = buttonColors[randomNumber]; 
    // console.log('randomChosenColor:', randomChosenColor);
    $(`#${randomChosenColor}`).fadeOut(100).fadeIn(100);
    playSound(randomChosenColor);
    gamePattern.push(randomChosenColor);
    // console.log('gamePattern=', gamePattern);
}

// Function to restart the game by resetting all the parameters
function startOver(){
    started = false;
    level = 0;
    gamePattern = [];
}
